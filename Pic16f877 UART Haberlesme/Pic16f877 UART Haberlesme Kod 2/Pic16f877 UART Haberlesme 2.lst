CCS PCM C Compiler, Version 5.049, 5967               12-Haz-22 01:35

               Filename:   C:\Users\Eray\Desktop\Pic168f77 Projeleri\Pic16f877 UART Haberleþme\Pic16f877 UART Haberlesme 2.lst

               ROM used:   598 words (7%)
                           Largest free fragment is 2048
               RAM used:   29 (8%) at main() level
                           42 (11%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1F5
0003:  NOP
.................... #include<16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 8C,20
0005:  DATA EC,34
0006:  DATA EE,30
0007:  DATA 6E,10
0008:  DATA C4,32
0009:  DATA E7,32
000A:  DATA 72,10
000B:  DATA A5,39
000C:  DATA 00,00
*
00B2:  MOVF   3E,W
00B3:  CLRF   78
00B4:  SUBWF  3D,W
00B5:  BTFSC  03.0
00B6:  GOTO   0BA
00B7:  MOVF   3D,W
00B8:  MOVWF  77
00B9:  GOTO   0C6
00BA:  CLRF   77
00BB:  MOVLW  08
00BC:  MOVWF  3F
00BD:  RLF    3D,F
00BE:  RLF    77,F
00BF:  MOVF   3E,W
00C0:  SUBWF  77,W
00C1:  BTFSC  03.0
00C2:  MOVWF  77
00C3:  RLF    78,F
00C4:  DECFSZ 3F,F
00C5:  GOTO   0BD
00C6:  RETURN
00C7:  MOVF   35,W
00C8:  MOVWF  04
00C9:  BCF    03.7
00CA:  BTFSC  36.0
00CB:  BSF    03.7
00CC:  MOVF   3D,W
00CD:  MOVWF  00
00CE:  INCF   04,F
00CF:  CLRF   00
00D0:  INCF   35,F
00D1:  BTFSC  03.2
00D2:  INCF   36,F
00D3:  RETURN
00D4:  MOVLW  20
00D5:  BTFSS  38.4
00D6:  MOVLW  30
00D7:  MOVWF  39
00D8:  MOVF   37,W
00D9:  MOVWF  77
00DA:  BTFSS  37.7
00DB:  GOTO   0E4
00DC:  COMF   77,F
00DD:  INCF   77,F
00DE:  MOVF   77,W
00DF:  MOVWF  37
00E0:  MOVLW  2D
00E1:  MOVWF  39
00E2:  BSF    38.7
00E3:  BSF    38.0
00E4:  MOVF   37,W
00E5:  MOVWF  3D
00E6:  MOVLW  64
00E7:  MOVWF  3E
00E8:  CALL   0B2
00E9:  MOVF   77,W
00EA:  MOVWF  37
00EB:  MOVLW  30
00EC:  ADDWF  78,W
00ED:  MOVWF  3A
00EE:  MOVF   37,W
00EF:  MOVWF  3D
00F0:  MOVLW  0A
00F1:  MOVWF  3E
00F2:  CALL   0B2
00F3:  MOVLW  30
00F4:  ADDWF  77,W
00F5:  MOVWF  3C
00F6:  MOVLW  30
00F7:  ADDWF  78,W
00F8:  MOVWF  3B
00F9:  MOVF   39,W
00FA:  MOVWF  77
00FB:  MOVLW  30
00FC:  SUBWF  3A,W
00FD:  BTFSC  03.2
00FE:  GOTO   103
00FF:  BSF    38.1
0100:  BTFSC  38.7
0101:  BSF    38.2
0102:  GOTO   117
0103:  MOVF   39,W
0104:  MOVWF  3A
0105:  MOVLW  20
0106:  MOVWF  39
0107:  MOVLW  30
0108:  SUBWF  3B,W
0109:  BTFSC  03.2
010A:  GOTO   10F
010B:  BSF    38.0
010C:  BTFSC  38.7
010D:  BSF    38.1
010E:  GOTO   117
010F:  BTFSS  03.2
0110:  BSF    38.0
0111:  BTFSS  03.2
0112:  GOTO   117
0113:  MOVF   3A,W
0114:  MOVWF  3B
0115:  MOVLW  20
0116:  MOVWF  3A
0117:  BTFSC  38.2
0118:  GOTO   11E
0119:  BTFSC  38.1
011A:  GOTO   121
011B:  BTFSC  38.0
011C:  GOTO   124
011D:  GOTO   127
011E:  MOVF   39,W
011F:  MOVWF  3D
0120:  CALL   0C7
0121:  MOVF   3A,W
0122:  MOVWF  3D
0123:  CALL   0C7
0124:  MOVF   3B,W
0125:  MOVWF  3D
0126:  CALL   0C7
0127:  MOVF   3C,W
0128:  MOVWF  3D
0129:  CALL   0C7
012A:  BCF    0A.3
012B:  BCF    0A.4
012C:  GOTO   225 (RETURN)
012D:  MOVF   00,F
012E:  BTFSC  03.2
012F:  GOTO   143
0130:  CLRF   38
0131:  MOVF   04,W
0132:  MOVWF  37
0133:  BCF    38.0
0134:  BTFSC  03.7
0135:  BSF    38.0
0136:  MOVF   00,W
0137:  BTFSS  0C.4
0138:  GOTO   137
0139:  MOVWF  19
013A:  MOVF   37,W
013B:  MOVWF  04
013C:  BCF    03.7
013D:  BTFSC  38.0
013E:  BSF    03.7
013F:  INCF   04,F
0140:  BTFSC  03.2
0141:  INCF   05,F
0142:  GOTO   12D
0143:  BCF    0A.3
0144:  BCF    0A.4
0145:  GOTO   229 (RETURN)
*
0184:  MOVF   0B,W
0185:  MOVWF  38
0186:  BCF    0B.7
0187:  BSF    03.5
0188:  BSF    03.6
0189:  BSF    0C.7
018A:  BSF    0C.0
018B:  NOP
018C:  NOP
018D:  BCF    03.5
018E:  BCF    03.6
018F:  BTFSC  38.7
0190:  BSF    0B.7
0191:  BTFSC  03.0
0192:  GOTO   1BB
0193:  BSF    03.6
0194:  MOVF   0C,W
0195:  ANDLW  7F
0196:  BCF    03.6
0197:  MOVWF  38
0198:  BSF    03.6
0199:  MOVF   0D,W
019A:  BCF    03.6
019B:  MOVWF  39
019C:  BSF    03.6
019D:  MOVF   0F,W
019E:  BCF    03.6
019F:  MOVWF  3A
01A0:  MOVF   38,W
01A1:  MOVWF  3B
01A2:  CALL   158
01A3:  MOVF   39,W
01A4:  BSF    03.6
01A5:  MOVWF  0D
01A6:  BCF    03.6
01A7:  MOVF   3A,W
01A8:  BSF    03.6
01A9:  MOVWF  0F
01AA:  BCF    03.6
01AB:  MOVF   0B,W
01AC:  MOVWF  3B
01AD:  BCF    0B.7
01AE:  BSF    03.5
01AF:  BSF    03.6
01B0:  BSF    0C.7
01B1:  BSF    0C.0
01B2:  NOP
01B3:  NOP
01B4:  BCF    03.5
01B5:  BCF    03.6
01B6:  BTFSC  3B.7
01B7:  BSF    0B.7
01B8:  DECFSZ 37,F
01B9:  GOTO   1BB
01BA:  GOTO   1DA
01BB:  BSF    03.6
01BC:  RLF    0C,W
01BD:  RLF    0E,W
01BE:  ANDLW  7F
01BF:  BCF    03.6
01C0:  MOVWF  38
01C1:  BSF    03.6
01C2:  MOVF   0D,W
01C3:  BCF    03.6
01C4:  MOVWF  39
01C5:  BSF    03.6
01C6:  MOVF   0F,W
01C7:  BCF    03.6
01C8:  MOVWF  3A
01C9:  MOVF   38,W
01CA:  MOVWF  3B
01CB:  CALL   158
01CC:  MOVF   39,W
01CD:  BSF    03.6
01CE:  MOVWF  0D
01CF:  BCF    03.6
01D0:  MOVF   3A,W
01D1:  BSF    03.6
01D2:  MOVWF  0F
01D3:  INCF   0D,F
01D4:  BTFSC  03.2
01D5:  INCF   0F,F
01D6:  BCF    03.0
01D7:  BCF    03.6
01D8:  DECFSZ 37,F
01D9:  GOTO   184
01DA:  BCF    0A.3
01DB:  BCF    0A.4
01DC:  GOTO   23B (RETURN)
01DD:  MOVF   00,F
01DE:  BTFSC  03.2
01DF:  GOTO   1F2
01E0:  CLRF   38
01E1:  MOVF   04,W
01E2:  MOVWF  37
01E3:  BCF    38.0
01E4:  BTFSC  03.7
01E5:  BSF    38.0
01E6:  MOVF   00,W
01E7:  MOVWF  3B
01E8:  CALL   158
01E9:  MOVF   37,W
01EA:  MOVWF  04
01EB:  BCF    03.7
01EC:  BTFSC  38.0
01ED:  BSF    03.7
01EE:  INCF   04,F
01EF:  BTFSC  03.2
01F0:  INCF   05,F
01F1:  GOTO   1DD
01F2:  BCF    0A.3
01F3:  BCF    0A.4
01F4:  GOTO   23F (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #fuses XT,NOWDT,NOPROTECT,NOBROWNOUT,NOLVP,NOPUT,NOWRT,NODEBUG,NOCPD 
....................  
.................... #use delay(clock = 4000000) 
*
000D:  MOVLW  3C
000E:  MOVWF  04
000F:  BCF    03.7
0010:  MOVF   00,W
0011:  BTFSC  03.2
0012:  GOTO   021
0013:  MOVLW  01
0014:  MOVWF  78
0015:  CLRF   77
0016:  DECFSZ 77,F
0017:  GOTO   016
0018:  DECFSZ 78,F
0019:  GOTO   015
001A:  MOVLW  4A
001B:  MOVWF  77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  GOTO   01F
001F:  DECFSZ 00,F
0020:  GOTO   013
0021:  RETURN
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003A:  MOVLW  0F
003B:  BSF    03.5
003C:  ANDWF  06,W
003D:  IORLW  F0
003E:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003F:  BCF    03.5
0040:  BSF    06.2
....................    delay_cycles(1); 
0041:  NOP
....................    lcd_output_enable(1); 
0042:  BSF    06.0
....................    delay_cycles(1); 
0043:  NOP
....................    high = lcd_read_nibble(); 
0044:  CALL   02E
0045:  MOVF   78,W
0046:  MOVWF  43
....................        
....................    lcd_output_enable(0); 
0047:  BCF    06.0
....................    delay_cycles(1); 
0048:  NOP
....................    lcd_output_enable(1); 
0049:  BSF    06.0
....................    delay_us(1); 
004A:  NOP
....................    low = lcd_read_nibble(); 
004B:  CALL   02E
004C:  MOVF   78,W
004D:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
004E:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004F:  MOVLW  0F
0050:  BSF    03.5
0051:  ANDWF  06,W
0052:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0053:  BCF    03.5
0054:  SWAPF  43,W
0055:  MOVWF  77
0056:  MOVLW  F0
0057:  ANDWF  77,F
0058:  MOVF   77,W
0059:  IORWF  42,W
005A:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002E:  MOVF   06,W
002F:  MOVWF  77
0030:  SWAPF  06,W
0031:  ANDLW  0F
0032:  MOVWF  78
....................   #endif 
0033:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0022:  SWAPF  43,W
0023:  ANDLW  F0
0024:  MOVWF  77
0025:  MOVLW  0F
0026:  ANDWF  06,W
0027:  IORWF  77,W
0028:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0029:  NOP
....................    lcd_output_enable(1); 
002A:  BSF    06.0
....................    delay_us(2); 
002B:  GOTO   02C
....................    lcd_output_enable(0); 
002C:  BCF    06.0
002D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0034:  BSF    03.5
0035:  BCF    06.0
....................    lcd_rs_tris(); 
0036:  BCF    06.1
....................    lcd_rw_tris(); 
0037:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0038:  BCF    03.5
0039:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005B:  MOVF   78,W
005C:  MOVWF  42
005D:  BTFSC  42.7
005E:  GOTO   03A
....................    lcd_output_rs(address); 
005F:  BTFSS  40.0
0060:  BCF    06.1
0061:  BTFSC  40.0
0062:  BSF    06.1
....................    delay_cycles(1); 
0063:  NOP
....................    lcd_output_rw(0); 
0064:  BCF    06.2
....................    delay_cycles(1); 
0065:  NOP
....................    lcd_output_enable(0); 
0066:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0067:  SWAPF  41,W
0068:  MOVWF  42
0069:  MOVLW  0F
006A:  ANDWF  42,F
006B:  MOVF   42,W
006C:  MOVWF  43
006D:  CALL   022
....................    lcd_send_nibble(n & 0xf); 
006E:  MOVF   41,W
006F:  ANDLW  0F
0070:  MOVWF  42
0071:  MOVWF  43
0072:  CALL   022
0073:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0074:  MOVLW  28
0075:  MOVWF  38
0076:  MOVLW  0C
0077:  MOVWF  39
0078:  MOVLW  01
0079:  MOVWF  3A
007A:  MOVLW  06
007B:  MOVWF  3B
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
007C:  BCF    06.0
....................    lcd_output_rs(0); 
007D:  BCF    06.1
....................    lcd_output_rw(0); 
007E:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007F:  MOVLW  0F
0080:  BSF    03.5
0081:  ANDWF  06,W
0082:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0083:  BCF    06.0
....................    lcd_rs_tris(); 
0084:  BCF    06.1
....................    lcd_rw_tris(); 
0085:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0086:  MOVLW  0F
0087:  BCF    03.5
0088:  MOVWF  3C
0089:  CALL   00D
....................    for(i=1;i<=3;++i) 
008A:  MOVLW  01
008B:  MOVWF  37
008C:  MOVF   37,W
008D:  SUBLW  03
008E:  BTFSS  03.0
008F:  GOTO   098
....................    { 
....................        lcd_send_nibble(3); 
0090:  MOVLW  03
0091:  MOVWF  43
0092:  CALL   022
....................        delay_ms(5); 
0093:  MOVLW  05
0094:  MOVWF  3C
0095:  CALL   00D
0096:  INCF   37,F
0097:  GOTO   08C
....................    } 
....................     
....................    lcd_send_nibble(2); 
0098:  MOVLW  02
0099:  MOVWF  43
009A:  CALL   022
....................    delay_ms(5); 
009B:  MOVLW  05
009C:  MOVWF  3C
009D:  CALL   00D
....................    for(i=0;i<=3;++i) 
009E:  CLRF   37
009F:  MOVF   37,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A3:  MOVLW  38
00A4:  ADDWF  37,W
00A5:  MOVWF  04
00A6:  BCF    03.7
00A7:  MOVF   00,W
00A8:  MOVWF  3C
00A9:  CLRF   40
00AA:  MOVF   3C,W
00AB:  MOVWF  41
00AC:  CALL   034
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AD:  INCF   37,F
00AE:  GOTO   09F
00AF:  BCF    0A.3
00B0:  BCF    0A.4
00B1:  GOTO   21B (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0146:  DECFSZ 3D,W
0147:  GOTO   149
0148:  GOTO   14C
....................       address=LCD_LINE_TWO; 
0149:  MOVLW  40
014A:  MOVWF  3E
014B:  GOTO   14D
....................    else 
....................       address=0; 
014C:  CLRF   3E
....................       
....................    address+=x-1; 
014D:  MOVLW  01
014E:  SUBWF  3C,W
014F:  ADDWF  3E,F
....................    lcd_send_byte(0,0x80|address); 
0150:  MOVF   3E,W
0151:  IORLW  80
0152:  MOVWF  3F
0153:  CLRF   40
0154:  MOVF   3F,W
0155:  MOVWF  41
0156:  CALL   034
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0157:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0158:  MOVF   3B,W
0159:  XORLW  07
015A:  BTFSC  03.2
015B:  GOTO   166
015C:  XORLW  0B
015D:  BTFSC  03.2
015E:  GOTO   16B
015F:  XORLW  06
0160:  BTFSC  03.2
0161:  GOTO   173
0162:  XORLW  02
0163:  BTFSC  03.2
0164:  GOTO   179
0165:  GOTO   17E
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0166:  MOVLW  01
0167:  MOVWF  3C
0168:  MOVWF  3D
0169:  CALL   146
016A:  GOTO   183
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
016B:  CLRF   40
016C:  MOVLW  01
016D:  MOVWF  41
016E:  CALL   034
....................                      delay_ms(2); 
016F:  MOVLW  02
0170:  MOVWF  3C
0171:  CALL   00D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0172:  GOTO   183
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0173:  MOVLW  01
0174:  MOVWF  3C
0175:  MOVLW  02
0176:  MOVWF  3D
0177:  CALL   146
0178:  GOTO   183
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0179:  CLRF   40
017A:  MOVLW  10
017B:  MOVWF  41
017C:  CALL   034
017D:  GOTO   183
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
017E:  MOVLW  01
017F:  MOVWF  40
0180:  MOVF   3B,W
0181:  MOVWF  41
0182:  CALL   034
....................      #endif 
....................    } 
0183:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #use rs232(baud=9600, xmit=pin_c6, rcv=pin_c7, parity=N, stop=1) //Haberleþme ayarlarýný yapýyoruz. 
....................  
.................... char alinan[10],verilen[10]; //Alýnan ve ver adýnda string dizi tanýmlýyoruz. 
.................... int verilecek; // a portundan alýnacak sayýsal deðeri tutacak olan deðiþken tanýmlanýyor 
....................  
.................... void main(){ 
*
01F5:  MOVF   03,W
01F6:  ANDLW  1F
01F7:  MOVWF  03
01F8:  MOVLW  19
01F9:  BSF    03.5
01FA:  MOVWF  19
01FB:  MOVLW  A6
01FC:  MOVWF  18
01FD:  MOVLW  90
01FE:  BCF    03.5
01FF:  MOVWF  18
0200:  CLRF   36
0201:  CLRF   35
0202:  BSF    03.5
0203:  BSF    1F.0
0204:  BSF    1F.1
0205:  BSF    1F.2
0206:  BCF    1F.3
0207:  BCF    03.7
.................... setup_psp(PSP_DISABLED); 
0208:  BCF    09.4
.................... setup_timer_1(T1_DISABLED); 
0209:  BCF    03.5
020A:  CLRF   10
.................... setup_timer_2(T2_DISABLED,0,1); 
020B:  MOVLW  00
020C:  MOVWF  78
020D:  MOVWF  12
020E:  MOVLW  00
020F:  BSF    03.5
0210:  MOVWF  12
.................... setup_adc_ports(NO_ANALOGS); 
0211:  BSF    1F.0
0212:  BSF    1F.1
0213:  BSF    1F.2
0214:  BCF    1F.3
.................... setup_adc(ADC_OFF); 
0215:  BCF    03.5
0216:  BCF    1F.0
.................... setup_ccp1(CCP_OFF); 
0217:  MOVLW  F0
0218:  ANDWF  17,F
.................... setup_ccp2(CCP_OFF); 
0219:  ANDWF  1D,F
....................  
.................... lcd_init(); 
021A:  GOTO   074
....................  
.................... while(true){ 
.................... verilecek=input_a(); // A portundan gelen veri, verilecek adlý deðiþkene atanýyor. 
021B:  MOVF   05,W
021C:  MOVWF  34
.................... sprintf(verilen,"%d",verilecek); // int tipindeki deðiþkenin deðeri string tipindeki deðiþkene string olarak atanýyor.Sebebi haberleþmede string ve char veri tipinde iþlem yapýlmasýdýr. 
021D:  CLRF   36
021E:  MOVLW  2A
021F:  MOVWF  35
0220:  MOVF   34,W
0221:  MOVWF  37
0222:  MOVLW  18
0223:  MOVWF  38
0224:  GOTO   0D4
.................... puts(verilen); //ver adýndaki deðiþken puts komutuyla karþýya gönderiliyor. 
0225:  MOVLW  2A
0226:  MOVWF  04
0227:  BCF    03.7
0228:  GOTO   12D
0229:  MOVLW  0D
022A:  BTFSS  0C.4
022B:  GOTO   22A
022C:  MOVWF  19
022D:  MOVLW  0A
022E:  BTFSS  0C.4
022F:  GOTO   22E
0230:  MOVWF  19
.................... printf(lcd_putc,"\fAlinan Deger %s",alinan); //char veri tipinde olduðu için %s dedik. 
0231:  MOVLW  04
0232:  BSF    03.6
0233:  MOVWF  0D
0234:  MOVLW  00
0235:  MOVWF  0F
0236:  BCF    03.0
0237:  MOVLW  0E
0238:  BCF    03.6
0239:  MOVWF  37
023A:  GOTO   184
023B:  MOVLW  20
023C:  MOVWF  04
023D:  BCF    03.7
023E:  GOTO   1DD
.................... delay_ms(1000); 
023F:  MOVLW  04
0240:  MOVWF  37
0241:  MOVLW  FA
0242:  MOVWF  3C
0243:  CALL   00D
0244:  DECFSZ 37,F
0245:  GOTO   241
.................... gets(alinan); //Karþýdan gelen veri okunarak alinan adlý deðiþkene atanýyor. 
0246:  MOVLW  20
0247:  MOVWF  04
0248:  BCF    03.7
0249:  DECF   04,F
024A:  INCF   04,F
024B:  BTFSS  0C.5
024C:  GOTO   24B
024D:  MOVF   1A,W
024E:  MOVWF  00
024F:  MOVLW  0D
0250:  SUBWF  00,W
0251:  BTFSS  03.2
0252:  GOTO   24A
0253:  CLRF   00
0254:  GOTO   21B
....................  
.................... } 
....................  
.................... } 
....................  
0255:  SLEEP

Configuration Fuses:
   Word  1: 3B39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
